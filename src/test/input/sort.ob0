MODULE Sorting;

    CONST arrsz = 10;
    VAR myarr : ARRAY arrsz OF INTEGER;
        i : INTEGER;

    PROCEDURE qsort (VAR xs : ARRAY arrsz OF INTEGER);

        PROCEDURE swap (i, j : INTEGER);
            VAR t : INTEGER;
        BEGIN
            t := xs[i];
            xs[i] := xs[j];
            xs[j] := t
        END swap;

        PROCEDURE sort1 (l, r : INTEGER);
            VAR pivot, i, j : INTEGER;
        BEGIN
            pivot := xs[(l + r) DIV 2];
            i := l;
            j := r;

            WHILE i <= j DO

                WHILE xs[i] < pivot DO
                    i := i + 1
                END;

                WHILE (xs[j] > pivot) DO
                    j := j - 1
                END;

                IF i <= j THEN
                    swap (i, j);
                    i := i + 1;
                    j := j - 1
                END

            END;

            IF l < j THEN
                sort1 (l, j)
            END;

            IF j < r THEN
                sort1 (i, r)
            END

        END sort1;

    BEGIN
        sort1 (0, arrsz - 1)

    END qsort;

BEGIN

    myarr[0] := 16;
    myarr[1] := 5;
    myarr[2] := 19;
    myarr[3] := 222;
    myarr[4] := 1;
    myarr[5] := 34;
    myarr[6] := 81;
    myarr[7] := 5;
    myarr[8] := 71;
    myarr[9] := 0;

    qsort (myarr);

    (* Print sorted array *)
    i := 0;
    WHILE i < arrsz DO
        WriteLn (myarr[i]);
        i := i + 1
    END

END Sorting.